Parameters:

  VPC:
    Description: Default VPC
    Type: String
    Default: defvpc

  SubnetA:
    Description: Default SubnetA
    Type: String
    Default: defsuba

  SubnetB:
    Description: Default SubnetB
    Type: String
    Default: defsubb

  SubnetC:
    Description: Default SubnetC
    Type: String
    Default: defsubc

Resources:
  
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'engage'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: engage-elb
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for allow 80 HTTP only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !Ref VPC
      Protocol: 'HTTP'
      Port: '80'


Outputs:
  
  Cluster:
    Value: !Ref ECSCluster
    Export:
      Name: 'ECSCluster'

  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListener
    Export:
      Name: 'Listener'

  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: 'DomainName'

  ALBSGID:
    Description: ID of ALB SG
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId
    Export:
      Name: 'ALBSGID'
